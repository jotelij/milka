// Mocks generated by Mockito 5.4.4 from annotations
// in milka/test/app/blocs/search_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:milka/app/data/i_repository.dart' as _i3;
import 'package:milka/app/data/models/models.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponseModel_0 extends _i1.SmartFake implements _i2.ResponseModel {
  _FakeResponseModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTokenModel_1 extends _i1.SmartFake implements _i2.TokenModel {
  _FakeTokenModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRepository extends _i1.Mock implements _i3.IRepository {
  MockIRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ResponseModel> searchResult(String? searchWord) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchResult,
          [searchWord],
        ),
        returnValue: _i4.Future<_i2.ResponseModel>.value(_FakeResponseModel_0(
          this,
          Invocation.method(
            #searchResult,
            [searchWord],
          ),
        )),
      ) as _i4.Future<_i2.ResponseModel>);

  @override
  _i4.Future<_i2.TokenModel> refreshToken() => (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
        ),
        returnValue: _i4.Future<_i2.TokenModel>.value(_FakeTokenModel_1(
          this,
          Invocation.method(
            #refreshToken,
            [],
          ),
        )),
      ) as _i4.Future<_i2.TokenModel>);
}
